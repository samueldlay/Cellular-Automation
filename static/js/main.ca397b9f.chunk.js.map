{"version":3,"sources":["gameOfLife.ts","App.tsx","index.tsx"],"names":["generateBoard","rows","columns","random","board","r","c","Math","floor","aliveCount","neighbors","filter","Boolean","length","shouldReproduce","shouldSurvive","count","includes","console","clear","App","useState","setBoard","rowCount","columnCount","automationActive","setAutomationActive","useEffect","randomBoard","timerId","setInterval","currentBoard","nextBoard","currentRow","nextRow","currentColumn","currentCell","neighbor","getNextBoard","clearInterval","className","href","style","borderCollapse","display","alignContent","justifyContent","marginBottom","map","row","indexRow","column","indexColumn","backgroundColor","width","height","onClick","boardClone","cloneBoard","value","gap","alignItems","color","bool","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.ca397b9f.chunk.js","sourcesContent":["export type Board = number[][];\n\nexport function generateBoard (\n  rows: number,\n  columns: number,\n  random?: boolean,\n): Board {\n  const board: Board = [];\n  for (let r = 0; r < rows; r++) {\n    board[r] = [];\n    for (let c = 0; c < columns; c++) {\n      board[r][c] = random ? Math.floor(Math.random() * 2) : 0;\n    }\n  }\n  return board;\n}\n\nexport function cloneBoard (board: Board): Board {\n  return board.map(row => [...row]);\n}\n\nfunction aliveCount (neighbors: number[]): number {\n  return neighbors.filter(Boolean).length;\n  // return neighbors.filter((n) => n === 1).length;\n}\n\nfunction shouldReproduce (neighbors: number[]): boolean {\n  return aliveCount(neighbors) === 3;\n}\n\nfunction shouldSurvive (neighbors: number[]): boolean {\n  const count = aliveCount(neighbors);\n  return [2, 3].includes(count);\n  // return aliveCount(neighbors) === 2 || aliveCount(neighbors) === 3;\n}\n\nexport function getNextBoard (currentBoard: Board): Board {\n  const nextBoard: Board = [];\n\n  for (let currentRow = 0; currentRow < currentBoard.length; currentRow++) {\n    const nextRow: number[] = [];\n    nextBoard[currentRow] = nextRow;\n\n    for (\n      let currentColumn = 0;\n      currentColumn < currentBoard[0].length;\n      currentColumn++\n    ) {\n      const currentCell = currentBoard[currentRow][currentColumn];\n      const aboveNeighbor = currentBoard[currentRow - 1]?.[currentColumn];\n      const aboveLeft = currentBoard[currentRow - 1]?.[currentColumn - 1];\n      const aboveRight = currentBoard[currentRow - 1]?.[currentColumn + 1];\n      const belowNeighbor = currentBoard[currentRow + 1]?.[currentColumn];\n      const belowLeft = currentBoard[currentRow + 1]?.[currentColumn - 1];\n      const belowRight = currentBoard[currentRow + 1]?.[currentColumn + 1];\n      const leftNeighbor = currentBoard[currentRow][currentColumn - 1];\n      const rightNeighbor = currentBoard[currentRow][currentColumn + 1];\n\n      const neighbors = [\n        aboveNeighbor,\n        aboveLeft,\n        aboveRight,\n        belowNeighbor,\n        belowLeft,\n        belowRight,\n        leftNeighbor,\n        rightNeighbor\n      ]\n      .filter(neighbor => typeof neighbor === 'number');\n      // .filter(Boolean);\n\n      if (currentCell === 0) {\n        // it's dead\n        if (shouldReproduce(neighbors)) {\n          nextRow[currentColumn] = 1;\n        } \n        else nextRow[currentColumn] = currentCell;\n      }\n      else {\n        // it's alive\n        if (shouldSurvive(neighbors)) {\n          nextRow[currentColumn] = currentCell;\n        } \n        else nextRow[currentColumn] = 0;\n      }\n    }\n  }\n\n  return nextBoard;\n}\n\nconsole.clear();\n","import {useEffect, useState} from \"react\";\nimport \"./styles.css\";\nimport {Board, cloneBoard, getNextBoard, generateBoard} from \"./gameOfLife\";\n\nexport default function App() {\n  const [board, setBoard] = useState<Board>([[]]);\n  const [rowCount, setRowCount] = useState(40);\n  const [columnCount, setColumnCount] = useState(40);\n  const [automationActive, setAutomationActive] = useState(false);\n\n  const toggleAutomationState = (): void => setAutomationActive(bool => !bool);\n\n  // const handleClear = (): void => {\n  //   const godMode = generateBoard(rowCount, columnCount);\n  //   setBoard(godMode);\n  // }\n\n  const randomizeBoard = (): void => {\n    const randomBoard = generateBoard(rowCount, columnCount, true);\n    setBoard(randomBoard);\n  };\n\n  useEffect(() => {\n    const randomBoard = generateBoard(rowCount, columnCount, true);\n    setBoard(randomBoard);\n  }, [rowCount, columnCount]);\n\n  // https://reactjs.org/docs/hooks-effect.html\n  useEffect(\n    // if you returned a cleanup fn last time this callback was run, then\n    // react \"runs it here\"\n    () => {\n      if (!automationActive) return;\n      const timerId = setInterval(() => setBoard(board => getNextBoard(board)), 70);\n      const cleanupFn = () => clearInterval(timerId);\n      return cleanupFn;\n    },\n    [automationActive],\n  );\n\n  return (\n    <div className=\"App\">\n      <h1>Game of Life (Cellular Automation)</h1>\n      <a href='https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life'>More details about the Game of Life here!</a>\n      {/* <h3>Rules:</h3>\n      <ul>\n        <li>{`Any live cell with fewer than (< 2) two live neighbours dies (under-population)`}</li>\n        <li>{`Any live cell with two or three live neighbours lives on to the next generation (survival)`}</li>\n        <li>{`Any live cell with more than (> 3) three live neighbours dies (overcrowding)`}</li>\n        <li>{`Any dead cell with exactly three (=== 3) live neighbours becomes a live cell (reproduction)`}</li>\n      </ul> */}\n      <table style={{borderCollapse: 'collapse', display: 'flex', alignContent: 'center', justifyContent: 'center', marginBottom: '2rem'}}>\n        \n      <tbody>\n          {board.map((row, indexRow) => {\n            return (\n              <tr key={indexRow}>\n                {row.map((column, indexColumn) => {\n                  return (\n                    <td\n                      style={{\n                        backgroundColor: column === 1 ? \"#000\" : \"#fff\",\n                        width: \"1rem\",\n                        height: \"1rem\",\n                        // border: \"1px solid black\",\n                      }}\n                      key={indexColumn}\n                      onClick={() => {\n                        // setAutomationActive(false);\n                        const boardClone = cloneBoard(board);\n                        // consider a function: toggleCell(board: Board, row: number, column: number): Board\n                        const value = boardClone[indexRow][indexColumn];\n                        boardClone[indexRow][indexColumn] = value === 0 ? 1 : 0;\n                        setBoard(boardClone);\n                      }}\n                      // onMouseUp={() => setAutomationActive(true)}\n                    ></td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      {/* <input\n        onChange={(e) => {\n          const value = parseInt(e.target.value, 10);\n          setRowCount(isNaN(value) ? 0 : value);\n          \n        }}\n        value={rowCount}\n      />\n      <input\n        onChange={(e) => {\n          const value = parseInt(e.target.value, 10);\n          setColumnCount(isNaN(value) ? 0 : value);\n          \n        }}\n        value={columnCount}\n      /> */}\n      <div style={{display: 'flex', gap: '1rem', justifyContent: 'center', alignItems: 'center'}}>\n      {automationActive ? null : <button style={{width: '20rem'}} onClick={randomizeBoard}>Randomize Initial Generation</button>}\n      {/* {!automationActive && <button style={{width: '50%'}} onClick={handleClear}>Play God</button>} */}\n      <button style={{color: !automationActive ? 'inherit' : 'red', width: '20rem'}} onClick={toggleAutomationState}>{!automationActive ? 'Begin' : 'Pause'} generations</button>\n      </div>\n    </div>\n  );\n}\n","import { render } from \"react-dom\";\nimport React, {useEffect, useState} from 'react';\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n\n// const Example = props => {\n//   const [countdown, setCountdown] = React.useState(100);\n//   React.useEffect(() => {\n//       const timeout = setTimeout(() => {\n//           setCountdown(countdown - 1);\n//       }, 500);\n//       // return () => {\n//       //   console.log(timeout)\n//       //   if (countdown < 1)\n//       //     clearTimeout(timeout);\n//       // }\n//       if (countdown < 95) clearTimeout(timeout);\n//   }, [countdown]);\n  \n//   return (<div>{countdown}</div>)\n// }\n\n\n// // Render it\n// render(\n//   <Example />,\n//   document.getElementById(\"root\")\n// );\n"],"sourceRoot":""}